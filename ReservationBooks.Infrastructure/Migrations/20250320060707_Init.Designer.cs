// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReservationBooks.Infrastructure.Adapters.Mssql;

#nullable disable

namespace ReservationBooks.Infrastructure.Migrations
{
    [DbContext(typeof(MssqlDbContext))]
    [Migration("20250320060707_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReservationBooks.Core.Domain.Model.BookInstance", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookId");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("BookInstances", (string)null);
                });

            modelBuilder.Entity("ReservationBooks.Core.Domain.Model.BookInstanceStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("BookInstanceStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CheckedOutToReadingRoom"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CheckedOutToHome"
                        },
                        new
                        {
                            Id = 4,
                            Name = "WrittenOff"
                        });
                });

            modelBuilder.Entity("ReservationBooks.Core.Domain.Model.Member", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Members", (string)null);
                });

            modelBuilder.Entity("ReservationBooks.Core.Domain.Model.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookInstanceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndReservationDatePlan")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndReservationDatePlan");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReservationDate");

                    b.HasKey("Id");

                    b.HasIndex("BookInstanceId");

                    b.HasIndex("MemberId");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("ReservationBooks.Core.Domain.Model.BookInstance", b =>
                {
                    b.HasOne("ReservationBooks.Core.Domain.Model.BookInstanceStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ReservationBooks.Core.Domain.Model.InventoryNumber", "InventoryNumber", b1 =>
                        {
                            b1.Property<int>("BookInstanceId")
                                .HasColumnType("int");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("InventoryNumber");

                            b1.HasKey("BookInstanceId");

                            b1.ToTable("BookInstances");

                            b1.WithOwner()
                                .HasForeignKey("BookInstanceId");
                        });

                    b.Navigation("InventoryNumber")
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ReservationBooks.Core.Domain.Model.Reservation", b =>
                {
                    b.HasOne("ReservationBooks.Core.Domain.Model.BookInstance", null)
                        .WithMany("Reservations")
                        .HasForeignKey("BookInstanceId");

                    b.HasOne("ReservationBooks.Core.Domain.Model.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ReservationBooks.Core.Domain.Model.BookInstance", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
